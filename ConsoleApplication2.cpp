#include <iostream>
#include <cmath>
#include "windows.h"
using namespace std;


class type1 {
public:
    void Get_answer() {
        cout << "Ответом является любое значение Х" << endl;
    }
    void show() {
        cout << "Уравнение 0 = 0" << endl;
    }
};

class type6 {
private:
    double A;
public:
    type6(double a1) {
        A = a1;
    }
    void Get_answer() {
        cout << "Ответом является Х = 0" << endl;
    }
    void show() {
        cout << "Уравнение " << A << "*x^2 = 0" << endl;
    }
};

class type2 {
private:
    double C;
public:
    type2(double c1) {
        C = c1;
    }
    void Get_answer() {
        cout << "Корней нет" << endl;
    }
    void show() {
        cout << C << " = 0" << endl;
    }
};

class type5 {
private:
    double A, C;
public:
    type5(double a1, double c1) {
        A = a1;
        C = c1;
    }
    void Get_answer() {
        double k = ((-1) * C) / A;
        if (k >= 0) {
            double x1 = sqrt(k);
            double x2 = sqrt(k) * (-1);
            cout << "Корни уравнения: " << endl << "X1 = " << x1 << endl << "X2 = " << x2 << endl;
        }
        else {
            cout << "Корней нет" << endl;
        }
    }
    void show() {
        cout << "Уравнение " << A << "*x^2 + " << C << " = 0" << endl;
    }
    void Get_answer_podbor() {
        if ((((-1) * C) / A) < 0) {
            cout << "Корней методом подбора нет" << endl;
        }
        else {
            double min = abs(0 - A * (-20) * (-20) - C);
            double x = -20;
            for (double i = -20; i < 20.01; i = i + 0.01) {
                double temp = abs(0 - A * (i) * (i)-C);
                if (temp < min) {
                    min = temp;
                    x = i;
                }
            }
            cout << "Приближенно, один из корней уравнения: " << x << endl;
        }
    }
};

class type7 {
private:
    double B, C;
public:
    type7(double b1, double c1) {
        B = b1;
        C = c1;
    }
    void Get_answer() {
        cout << "Корень уравнения: " << (-1) * (C / B) << endl;
    }
    void show() {
        cout << "Уравнение " << B << "*x + " << C << " = 0" << endl;
    }
    void Get_answer_podbor() {
        double min = abs(0 - B * (-20) - C);
        double x = -20;
        for (double i = -20; i < 20.01; i = i + 0.01) {
            double temp = abs(0 - B * (i)-C);
            if (temp < min) {
                min = temp;
                x = i;
            }
        }
        cout << "Приближенно, один из корней уравнения: " << x << endl;
    }
};

class type3 {
private:
    double A, B, C;
public:
    type3(double a1, double b1, double c1) {
        A = a1;
        B = b1;
        C = c1;
    }
    void Get_answer() {
        double D = B * B - 4 * A * C;
        if (D < 0) {
            cout << "Уравнение не имеет действительных корней" << endl;
        }
        else {
            if (D == 0) {
                double x = ((-1) * B - sqrt(D)) / (2 * A);
                cout << "Корень уравнения: " << x << endl;
            }
            else {
                double x1 = ((-1) * B - sqrt(D)) / (2 * A);
                double x2 = ((-1) * B + sqrt(D)) / (2 * A);
                cout << "Корни уравнения: " << endl;
                cout << "X1 = " << x1 << endl << "X2 = " << x2 << endl;
            }
        }
    }
    void show() {
        cout << "Уравнение " << A << "*x^2 + " << B << "*x + " << C << " = 0" << endl;
    }
    void Get_answer_podbor() {
        double D = B * B - 4 * A * C;
        if (D < 0) {
            cout << "Уравнение не имеет действительных корней" << endl;
        }
        else {
            double min = abs(0 - A * (-20) * (-20) - B * (-20) - C);
            double x = -20;
            for (double i = -20; i < 20.01; i = i + 0.01) {
                double temp = abs(0 - A * (i) * (i)-B * i - C);
                if (temp < min) {
                    min = temp;
                    x = i;
                }
            }
            cout << "Приближенно, один из корней уравнения: " << x << endl;
        }
    }
};

class type8 {
private:
    double B;
public:
    type8(double b1) {
        B = b1;
    }
    void Get_answer() {
        cout << "Корень уравнения: x = 0" << endl;
    }
    void show() {
        cout << "Уравнение " << B << "*x = 0" << endl;
    }
};

class type4 {
private:
    double A, B;
public:
    type4(double a1, double b1) {
        A = a1;
        B = b1;
    }
    void Get_answer() {
        double x = ((-1) * B) / A;
        cout << "Корни уравнения: " << endl;
        cout << "X1 = 0" << endl << "X2 = " << x << endl;
    }
    void show() {
        cout << "Уравнение " << A << "*x^2 + " << B << "*x = 0 " << endl;
    }
    void Get_answer_podbor() {
        double min = abs(0 - A * (-20) * (-20) - B * (-20));
        double x = -20;
        for (double i = -20; i < 20.01; i = i + 0.01) {
            if (i != 0) {
                double temp = abs(0 - A * i * i - B * (i));
                if (temp < min) {
                    min = temp;
                    x = i;
                }
            }
        }
        cout << "Приближенно, один из корней уравнения: " << x << endl;
    }
};



class menu {
public:
    void Get_info(){
        const string menu =
R"(


            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            | МЕНЮ                                                                          |
            | 1. Типы квадратных уравнений                                                  |
            | 2. Некоторые методы решения квадратных уравнений и их сравнение               |
            | 3. Решение квадратных уравнений                                               |
            | 4. Выход                                                                      |
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


            "Выберите вариант --> 

)";
        cout << menu;
    }
};

class info {
public:
    void Get_info() {
        const string info =
R"(

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~1. ТИПЫ КВАДРАТНЫХ УРАВНЕНИЙ ~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Квадратное уравнение - это алгебраическое уравнение второй степени, общий вид которого: ах^2 + Bх + B = 0.

В зависимости от значений, которые могут принимать коэффициенты квадратного уравнения, можно выделить восемь типов
квадратных уравнений.

1.  0 = 0 .
2.  c = 0.
3.  Ax^2 + Bx + C = 0.
4.  Ax^2 + Bx = 0.
5.  Ax^2 + C = 0.
6.  Ax^2 = 0.
7.  Bx + C = 0.
8.  Bx = 0.

Данная программа оперирует перечисленными выше типами квадратных уравнений при нахождении их корней.

Для перехода к меню нажмите любую клавишу...
)";
        cout << info;
    }
};

class sposob {
public:
    void Get_info(){
        const string sposob =
 R"(
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~ 2. Некоторые методы решения квадратных уравнений и их сравнение. ~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для решения квадратных уравнений используются различные методы. Выбор метода зависит от типа квадратного уравнения.

К основным методам решения квадратных уравнений обычно относят следующие:

1. Выделение полного квадрата.
2. Разложение на множители.
3. Использование дискриминанта-
4. Теорема Виета.

При нулевом коэффициенте а уравнение упроцается, и его можно решить как обычное уравнение первой степени путём
выражения неизвестного.

Используя ресурси вычислительной машины, можно находить корни уравиений (в том числе квадратных) методом подбора.
для этого нухно определить интервал, в котором будет выполняться поиск корня, установить шаг и проверять все значения
многочлена уравнения в данном интервале с установленным шагом. Для человека Такая задача является более трудоёмкой
и ресурсозатратной, чем для компьютера.

Метод подбора имеет смысл использовать для уравнений типов 3, 4, 5 и 7, используемых в данной программе.

Назовём классическим методом решения метод, который основан на решении или с помощью дискриминанта, или путём выражения
неизвестного.

Сравним классический метод решения с методом подбора. Для сравнения будем использовать уравнения с заданными
коэффициентами.

(3) Уравнение 6x^2 + 3x + -4 = 0.
--> Классический метод
Уравнение имееет следующие корни: -1.10391 ; 0,603913
--> Метод подбора 
Один из корней уравнения приблихённо равен 0.6.

(4)Уравнение -4.5х^2 + -1.875х = 0.
> Классический метод
Уравнение имеет следующие корни: 0; -0.416667.
--> Метод подбора
Один из корней уравнения приближённо равен 3.26936е-13.

(5) Уравнение Зх^2 + -1 = 0.
--> Классический метод
Уравнение имеет следующие корни: 0.57735; 0.57735.
--> метод подбора
Один из корней уравнения приближённо равен -0.58.

(7) Уравнение -3х + 2 = 0.
--> Классический метод
Уравнение имеет следующие корни: 0.666667.
--> Метод подбора
Один из корней уравнения приближённо равен 0.67.

+-----+-----------------------+------------------------+---------------------------+
| Тип |      Уравнение        |   Классический метод   |        Метод подбора      |
+-----+-----------------------+------------------------+---------------------------+
|  3  | 6x^2 + 3x + -4 = 0    | 15 операций (3779 мкс) | 37693 операций (1993 мкс) | 
|  4  | -4.5х^2 + -1.875х = 0 | 2 операций (2247 мкс)  | 33890 операций (2283 мкс) |
|  5  | Зх^2 + -1 = 0         | 6 операций (3696 мкс)  | 29840 операций (1857 мкс) |
|  7  | -3х + 2 = 0           | 2 операций (1790 мкс)  | 26210 операций (1828 мкс) |
+-----+-----------------------+------------------------+---------------------------+

По итогам сравнения методов (см. таблицу емие) более эффективным и. точным представляется классический метод.
однако метод подбора имеет свои достоинства: в некоторых случаях он решает задачу за сопоставимое или даже меньшее
время а такке не прибегает к использованию сложных математический операций (например, вычисление квадратного корня)
при этом метод подбора во многих случаях даёт результат, достаточно близкий к результату, полученному с поноцью классического метода.

Для продолжения нажмите любую кнопку ...
)";
        cout << sposob;
    }
};

int main()
{
    setlocale(LC_ALL, "Russian");
    int Variant, prost, i, ur;
    double A, B, C;
    info eqI;
    menu eqM;
    sposob eqS;

    while (true){
        eqM.Get_info();
        cin >> Variant;
        system("cls");
        if (Variant == 1) {
            eqI.Get_info();
            cin >> prost;
            system("cls");

        }
        else if (Variant == 2) {
            eqS.Get_info();
            cin >>  prost;
            system("cls");

        }
        else if (Variant == 3) {
            cout << "Выберите какой тип уравнения вы хотите решить: ";
            cin >> ur;
            if (ur == 1) {
                cout << "Введите коэффициенты  уравнения A, B и C через пробел: " << endl;
                cin >> A >> B >> C;
                type1 eq1;
                eq1.show();
                eq1.Get_answer();
            }
            else if (ur == 2) {
                cout << "Введите коэффициенты  уравнения A, B и C через пробел: " << endl;
                cin >> A >> B >> C;
                type2 eq2( C);
                eq2.show();
                eq2.Get_answer();
            }
            else if (ur == 3) {
                cout << "Введите коэффициенты  уравнения A, B и C через пробел: " << endl;
                cin >> A >> B >> C;
                type3 eq3(A,B,C);
                eq3.show();
                eq3.Get_answer();
                eq3.Get_answer_podbor();
            }
            else if (ur == 4) {
                cout << "Введите коэффициенты  уравнения A, B и C через пробел: " << endl;
                cin >> A >> B >> C;
                type4 eq4( A,B);
                eq4.show();
                eq4.Get_answer();
                eq4.Get_answer_podbor();
            }
            else if (ur == 5) {
                cout << "Введите коэффициенты  уравнения A, B и C через пробел: " << endl;
                cin >> A >> B >> C;
                type5 eq5(A, C);
                eq5.show();
                eq5.Get_answer();
                eq5.Get_answer_podbor();
            }

            else if (ur == 6) {
                cout << "Введите коэффициенты  уравнения A, B и C через пробел: " << endl;
                cin >> A >> B >> C;
                type6 eq6(A);
                eq6.show();
                eq6.Get_answer();
            }

            else if (ur == 7) {
                cout << "Введите коэффициенты  уравнения A, B и C через пробел: " << endl;
                cin >> A >> B >> C;
                type7 eq7( B, C);
                eq7.show();
                eq7.Get_answer();
                eq7.Get_answer_podbor();
            }
            else if (ur == 8) {
                cout << "Введите коэффициенты  уравнения A, B и C через пробел: " << endl;
                cin >> A >> B >> C;
                type8 eq8(B);
                eq8.show();
                eq8.Get_answer();
            }
            else {
                cout << " Вы выбрали невозможный вариант.";
            }
            cin >> prost;
            system("cls");
        }

        else if (Variant == 4) {
            exit(0);
        }
        else {
            cout << "Вы выбрали невозможный вариант, Вбкрите другой...";
            Sleep(3000);
        }
    }
}